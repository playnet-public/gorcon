// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"
)

type BattlEyeProtocol struct {
	BuildLoginPacketStub        func(string) []byte
	buildLoginPacketMutex       sync.RWMutex
	buildLoginPacketArgsForCall []struct {
		arg1 string
	}
	buildLoginPacketReturns struct {
		result1 []byte
	}
	buildLoginPacketReturnsOnCall map[int]struct {
		result1 []byte
	}
	VerifyLoginStub        func([]byte) (byte, error)
	verifyLoginMutex       sync.RWMutex
	verifyLoginArgsForCall []struct {
		arg1 []byte
	}
	verifyLoginReturns struct {
		result1 byte
		result2 error
	}
	verifyLoginReturnsOnCall map[int]struct {
		result1 byte
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *BattlEyeProtocol) BuildLoginPacket(arg1 string) []byte {
	fake.buildLoginPacketMutex.Lock()
	ret, specificReturn := fake.buildLoginPacketReturnsOnCall[len(fake.buildLoginPacketArgsForCall)]
	fake.buildLoginPacketArgsForCall = append(fake.buildLoginPacketArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("BuildLoginPacket", []interface{}{arg1})
	fake.buildLoginPacketMutex.Unlock()
	if fake.BuildLoginPacketStub != nil {
		return fake.BuildLoginPacketStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.buildLoginPacketReturns.result1
}

func (fake *BattlEyeProtocol) BuildLoginPacketCallCount() int {
	fake.buildLoginPacketMutex.RLock()
	defer fake.buildLoginPacketMutex.RUnlock()
	return len(fake.buildLoginPacketArgsForCall)
}

func (fake *BattlEyeProtocol) BuildLoginPacketArgsForCall(i int) string {
	fake.buildLoginPacketMutex.RLock()
	defer fake.buildLoginPacketMutex.RUnlock()
	return fake.buildLoginPacketArgsForCall[i].arg1
}

func (fake *BattlEyeProtocol) BuildLoginPacketReturns(result1 []byte) {
	fake.BuildLoginPacketStub = nil
	fake.buildLoginPacketReturns = struct {
		result1 []byte
	}{result1}
}

func (fake *BattlEyeProtocol) BuildLoginPacketReturnsOnCall(i int, result1 []byte) {
	fake.BuildLoginPacketStub = nil
	if fake.buildLoginPacketReturnsOnCall == nil {
		fake.buildLoginPacketReturnsOnCall = make(map[int]struct {
			result1 []byte
		})
	}
	fake.buildLoginPacketReturnsOnCall[i] = struct {
		result1 []byte
	}{result1}
}

func (fake *BattlEyeProtocol) VerifyLogin(arg1 []byte) (byte, error) {
	var arg1Copy []byte
	if arg1 != nil {
		arg1Copy = make([]byte, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.verifyLoginMutex.Lock()
	ret, specificReturn := fake.verifyLoginReturnsOnCall[len(fake.verifyLoginArgsForCall)]
	fake.verifyLoginArgsForCall = append(fake.verifyLoginArgsForCall, struct {
		arg1 []byte
	}{arg1Copy})
	fake.recordInvocation("VerifyLogin", []interface{}{arg1Copy})
	fake.verifyLoginMutex.Unlock()
	if fake.VerifyLoginStub != nil {
		return fake.VerifyLoginStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.verifyLoginReturns.result1, fake.verifyLoginReturns.result2
}

func (fake *BattlEyeProtocol) VerifyLoginCallCount() int {
	fake.verifyLoginMutex.RLock()
	defer fake.verifyLoginMutex.RUnlock()
	return len(fake.verifyLoginArgsForCall)
}

func (fake *BattlEyeProtocol) VerifyLoginArgsForCall(i int) []byte {
	fake.verifyLoginMutex.RLock()
	defer fake.verifyLoginMutex.RUnlock()
	return fake.verifyLoginArgsForCall[i].arg1
}

func (fake *BattlEyeProtocol) VerifyLoginReturns(result1 byte, result2 error) {
	fake.VerifyLoginStub = nil
	fake.verifyLoginReturns = struct {
		result1 byte
		result2 error
	}{result1, result2}
}

func (fake *BattlEyeProtocol) VerifyLoginReturnsOnCall(i int, result1 byte, result2 error) {
	fake.VerifyLoginStub = nil
	if fake.verifyLoginReturnsOnCall == nil {
		fake.verifyLoginReturnsOnCall = make(map[int]struct {
			result1 byte
			result2 error
		})
	}
	fake.verifyLoginReturnsOnCall[i] = struct {
		result1 byte
		result2 error
	}{result1, result2}
}

func (fake *BattlEyeProtocol) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.buildLoginPacketMutex.RLock()
	defer fake.buildLoginPacketMutex.RUnlock()
	fake.verifyLoginMutex.RLock()
	defer fake.verifyLoginMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *BattlEyeProtocol) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
