// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"sync"

	"github.com/playnet-public/gorcon/pkg/rcon"
)

type RconClient struct {
	NewConnectionStub        func(context.Context) rcon.Connection
	newConnectionMutex       sync.RWMutex
	newConnectionArgsForCall []struct {
		arg1 context.Context
	}
	newConnectionReturns struct {
		result1 rcon.Connection
	}
	newConnectionReturnsOnCall map[int]struct {
		result1 rcon.Connection
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *RconClient) NewConnection(arg1 context.Context) rcon.Connection {
	fake.newConnectionMutex.Lock()
	ret, specificReturn := fake.newConnectionReturnsOnCall[len(fake.newConnectionArgsForCall)]
	fake.newConnectionArgsForCall = append(fake.newConnectionArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	fake.recordInvocation("NewConnection", []interface{}{arg1})
	fake.newConnectionMutex.Unlock()
	if fake.NewConnectionStub != nil {
		return fake.NewConnectionStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.newConnectionReturns.result1
}

func (fake *RconClient) NewConnectionCallCount() int {
	fake.newConnectionMutex.RLock()
	defer fake.newConnectionMutex.RUnlock()
	return len(fake.newConnectionArgsForCall)
}

func (fake *RconClient) NewConnectionArgsForCall(i int) context.Context {
	fake.newConnectionMutex.RLock()
	defer fake.newConnectionMutex.RUnlock()
	return fake.newConnectionArgsForCall[i].arg1
}

func (fake *RconClient) NewConnectionReturns(result1 rcon.Connection) {
	fake.NewConnectionStub = nil
	fake.newConnectionReturns = struct {
		result1 rcon.Connection
	}{result1}
}

func (fake *RconClient) NewConnectionReturnsOnCall(i int, result1 rcon.Connection) {
	fake.NewConnectionStub = nil
	if fake.newConnectionReturnsOnCall == nil {
		fake.newConnectionReturnsOnCall = make(map[int]struct {
			result1 rcon.Connection
		})
	}
	fake.newConnectionReturnsOnCall[i] = struct {
		result1 rcon.Connection
	}{result1}
}

func (fake *RconClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.newConnectionMutex.RLock()
	defer fake.newConnectionMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *RconClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ rcon.Client = new(RconClient)
