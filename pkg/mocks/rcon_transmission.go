// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/playnet-public/gorcon/pkg/rcon"
)

type RconTransmission struct {
	KeyStub        func() uint32
	keyMutex       sync.RWMutex
	keyArgsForCall []struct{}
	keyReturns     struct {
		result1 uint32
	}
	keyReturnsOnCall map[int]struct {
		result1 uint32
	}
	RequestStub        func() string
	requestMutex       sync.RWMutex
	requestArgsForCall []struct{}
	requestReturns     struct {
		result1 string
	}
	requestReturnsOnCall map[int]struct {
		result1 string
	}
	DoneStub        func() bool
	doneMutex       sync.RWMutex
	doneArgsForCall []struct{}
	doneReturns     struct {
		result1 bool
	}
	doneReturnsOnCall map[int]struct {
		result1 bool
	}
	ResponseStub        func() string
	responseMutex       sync.RWMutex
	responseArgsForCall []struct{}
	responseReturns     struct {
		result1 string
	}
	responseReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *RconTransmission) Key() uint32 {
	fake.keyMutex.Lock()
	ret, specificReturn := fake.keyReturnsOnCall[len(fake.keyArgsForCall)]
	fake.keyArgsForCall = append(fake.keyArgsForCall, struct{}{})
	fake.recordInvocation("Key", []interface{}{})
	fake.keyMutex.Unlock()
	if fake.KeyStub != nil {
		return fake.KeyStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.keyReturns.result1
}

func (fake *RconTransmission) KeyCallCount() int {
	fake.keyMutex.RLock()
	defer fake.keyMutex.RUnlock()
	return len(fake.keyArgsForCall)
}

func (fake *RconTransmission) KeyReturns(result1 uint32) {
	fake.KeyStub = nil
	fake.keyReturns = struct {
		result1 uint32
	}{result1}
}

func (fake *RconTransmission) KeyReturnsOnCall(i int, result1 uint32) {
	fake.KeyStub = nil
	if fake.keyReturnsOnCall == nil {
		fake.keyReturnsOnCall = make(map[int]struct {
			result1 uint32
		})
	}
	fake.keyReturnsOnCall[i] = struct {
		result1 uint32
	}{result1}
}

func (fake *RconTransmission) Request() string {
	fake.requestMutex.Lock()
	ret, specificReturn := fake.requestReturnsOnCall[len(fake.requestArgsForCall)]
	fake.requestArgsForCall = append(fake.requestArgsForCall, struct{}{})
	fake.recordInvocation("Request", []interface{}{})
	fake.requestMutex.Unlock()
	if fake.RequestStub != nil {
		return fake.RequestStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.requestReturns.result1
}

func (fake *RconTransmission) RequestCallCount() int {
	fake.requestMutex.RLock()
	defer fake.requestMutex.RUnlock()
	return len(fake.requestArgsForCall)
}

func (fake *RconTransmission) RequestReturns(result1 string) {
	fake.RequestStub = nil
	fake.requestReturns = struct {
		result1 string
	}{result1}
}

func (fake *RconTransmission) RequestReturnsOnCall(i int, result1 string) {
	fake.RequestStub = nil
	if fake.requestReturnsOnCall == nil {
		fake.requestReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.requestReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *RconTransmission) Done() bool {
	fake.doneMutex.Lock()
	ret, specificReturn := fake.doneReturnsOnCall[len(fake.doneArgsForCall)]
	fake.doneArgsForCall = append(fake.doneArgsForCall, struct{}{})
	fake.recordInvocation("Done", []interface{}{})
	fake.doneMutex.Unlock()
	if fake.DoneStub != nil {
		return fake.DoneStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.doneReturns.result1
}

func (fake *RconTransmission) DoneCallCount() int {
	fake.doneMutex.RLock()
	defer fake.doneMutex.RUnlock()
	return len(fake.doneArgsForCall)
}

func (fake *RconTransmission) DoneReturns(result1 bool) {
	fake.DoneStub = nil
	fake.doneReturns = struct {
		result1 bool
	}{result1}
}

func (fake *RconTransmission) DoneReturnsOnCall(i int, result1 bool) {
	fake.DoneStub = nil
	if fake.doneReturnsOnCall == nil {
		fake.doneReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.doneReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *RconTransmission) Response() string {
	fake.responseMutex.Lock()
	ret, specificReturn := fake.responseReturnsOnCall[len(fake.responseArgsForCall)]
	fake.responseArgsForCall = append(fake.responseArgsForCall, struct{}{})
	fake.recordInvocation("Response", []interface{}{})
	fake.responseMutex.Unlock()
	if fake.ResponseStub != nil {
		return fake.ResponseStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.responseReturns.result1
}

func (fake *RconTransmission) ResponseCallCount() int {
	fake.responseMutex.RLock()
	defer fake.responseMutex.RUnlock()
	return len(fake.responseArgsForCall)
}

func (fake *RconTransmission) ResponseReturns(result1 string) {
	fake.ResponseStub = nil
	fake.responseReturns = struct {
		result1 string
	}{result1}
}

func (fake *RconTransmission) ResponseReturnsOnCall(i int, result1 string) {
	fake.ResponseStub = nil
	if fake.responseReturnsOnCall == nil {
		fake.responseReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.responseReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *RconTransmission) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.keyMutex.RLock()
	defer fake.keyMutex.RUnlock()
	fake.requestMutex.RLock()
	defer fake.requestMutex.RUnlock()
	fake.doneMutex.RLock()
	defer fake.doneMutex.RUnlock()
	fake.responseMutex.RLock()
	defer fake.responseMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *RconTransmission) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ rcon.Transmission = new(RconTransmission)
