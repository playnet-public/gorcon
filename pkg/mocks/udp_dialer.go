// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"net"
	"sync"

	"github.com/playnet-public/gorcon/pkg/rcon/battleye"
)

type UDPDialer struct {
	DialUDPStub        func(string, *net.UDPAddr, *net.UDPAddr) (battleye.UDPConnection, error)
	dialUDPMutex       sync.RWMutex
	dialUDPArgsForCall []struct {
		arg1 string
		arg2 *net.UDPAddr
		arg3 *net.UDPAddr
	}
	dialUDPReturns struct {
		result1 battleye.UDPConnection
		result2 error
	}
	dialUDPReturnsOnCall map[int]struct {
		result1 battleye.UDPConnection
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *UDPDialer) DialUDP(arg1 string, arg2 *net.UDPAddr, arg3 *net.UDPAddr) (battleye.UDPConnection, error) {
	fake.dialUDPMutex.Lock()
	ret, specificReturn := fake.dialUDPReturnsOnCall[len(fake.dialUDPArgsForCall)]
	fake.dialUDPArgsForCall = append(fake.dialUDPArgsForCall, struct {
		arg1 string
		arg2 *net.UDPAddr
		arg3 *net.UDPAddr
	}{arg1, arg2, arg3})
	fake.recordInvocation("DialUDP", []interface{}{arg1, arg2, arg3})
	fake.dialUDPMutex.Unlock()
	if fake.DialUDPStub != nil {
		return fake.DialUDPStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.dialUDPReturns.result1, fake.dialUDPReturns.result2
}

func (fake *UDPDialer) DialUDPCallCount() int {
	fake.dialUDPMutex.RLock()
	defer fake.dialUDPMutex.RUnlock()
	return len(fake.dialUDPArgsForCall)
}

func (fake *UDPDialer) DialUDPArgsForCall(i int) (string, *net.UDPAddr, *net.UDPAddr) {
	fake.dialUDPMutex.RLock()
	defer fake.dialUDPMutex.RUnlock()
	return fake.dialUDPArgsForCall[i].arg1, fake.dialUDPArgsForCall[i].arg2, fake.dialUDPArgsForCall[i].arg3
}

func (fake *UDPDialer) DialUDPReturns(result1 battleye.UDPConnection, result2 error) {
	fake.DialUDPStub = nil
	fake.dialUDPReturns = struct {
		result1 battleye.UDPConnection
		result2 error
	}{result1, result2}
}

func (fake *UDPDialer) DialUDPReturnsOnCall(i int, result1 battleye.UDPConnection, result2 error) {
	fake.DialUDPStub = nil
	if fake.dialUDPReturnsOnCall == nil {
		fake.dialUDPReturnsOnCall = make(map[int]struct {
			result1 battleye.UDPConnection
			result2 error
		})
	}
	fake.dialUDPReturnsOnCall[i] = struct {
		result1 battleye.UDPConnection
		result2 error
	}{result1, result2}
}

func (fake *UDPDialer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.dialUDPMutex.RLock()
	defer fake.dialUDPMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *UDPDialer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
